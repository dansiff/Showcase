name: Database Migration & Deployment

on:
  push:
    branches: [main, staging]
    paths:
      - 'db/migrations/**'
      - 'prisma/schema.prisma'
      - 'lib/**'
      - 'app/**'
  pull_request:
    branches: [main, staging]
  workflow_dispatch:
    inputs:
      migration_phase:
        description: 'Migration phase to run'
        required: true
        default: 'none'
        type: choice
        options:
          - none
          - phase1
          - phase2
          - rollback

env:
  NODE_VERSION: '18'
  SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}

jobs:
  # ============================================
  # JOB 1: Run Tests Against Dev/Staging DB
  # ============================================
  test-migrations:
    name: Test Migrations
    runs-on: ubuntu-latest
    
    # Use a service container for Postgres testing
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup test database URL
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
          echo "DIRECT_DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
      
      - name: Apply schema (Prisma)
        run: npx prisma db push --skip-generate
      
      - name: Generate Prisma Client
        run: npx prisma generate
      
      - name: Run migration Phase 1 (test)
        run: |
          psql $DATABASE_URL -f db/migrations/001_add_uuid_columns.sql || exit 1
      
      - name: Verify Phase 1
        run: |
          psql $DATABASE_URL -c "SELECT COUNT(*) FROM \"User\" WHERE id_uuid IS NULL;" | grep " 0"
      
      - name: Run integration tests
        run: npm run test:integration || npm run test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          NEXT_PUBLIC_SUPABASE_URL: http://localhost:54321
          NEXT_PUBLIC_SUPABASE_ANON_KEY: test_anon_key
          NEXTAUTH_SECRET: test_secret
          STRIPE_SECRET_KEY: sk_test_fake
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: pk_test_fake
      
      - name: Check for orphaned records
        run: |
          psql $DATABASE_URL -f db/migrations/verification.sql > verification_output.txt
          cat verification_output.txt
          # Fail if any orphans found
          grep -q "0 rows" verification_output.txt || exit 1

  # ============================================
  # JOB 2: Deploy to Staging
  # ============================================
  deploy-staging:
    name: Deploy to Staging
    needs: test-migrations
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    environment:
      name: staging
      url: https://staging.yourdomain.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Supabase CLI
        run: |
          curl -fsSL https://github.com/supabase/cli/releases/latest/download/supabase_linux_amd64.tar.gz | tar -xz
          sudo mv supabase /usr/local/bin/
      
      - name: Link to Supabase project
        run: supabase link --project-ref ${{ secrets.SUPABASE_STAGING_PROJECT_REF }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      
      - name: Run Phase 1 migration (if scheduled)
        if: github.event.inputs.migration_phase == 'phase1'
        run: |
          supabase db push -f db/migrations/001_add_uuid_columns.sql
          echo "‚úÖ Phase 1 migration complete on staging"
      
      - name: Run Phase 2 migration (if scheduled)
        if: github.event.inputs.migration_phase == 'phase2'
        run: |
          supabase db push -f db/migrations/002_add_uuid_constraints.sql
          echo "‚úÖ Phase 2 migration complete on staging"
      
      - name: Deploy application to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}
      
      - name: Run post-deployment health check
        run: |
          sleep 10
          curl -f https://staging.yourdomain.com/api/health || exit 1
          echo "‚úÖ Staging deployment healthy"
      
      - name: Notify team (Slack/Discord)
        if: always()
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d '{"text":"Staging deployment complete: ${{ job.status }}"}'

  # ============================================
  # JOB 3: Deploy to Production
  # ============================================
  deploy-production:
    name: Deploy to Production
    needs: test-migrations
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://yourdomain.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Supabase CLI
        run: |
          curl -fsSL https://github.com/supabase/cli/releases/latest/download/supabase_linux_amd64.tar.gz | tar -xz
          sudo mv supabase /usr/local/bin/
      
      - name: Link to Supabase project (Production)
        run: supabase link --project-ref ${{ secrets.SUPABASE_PROD_PROJECT_REF }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      
      - name: Backup production database
        run: |
          echo "üì¶ Creating backup before migration..."
          # Supabase creates automatic backups, but trigger manual one
          # This requires Supabase API call or Dashboard action
          echo "‚úÖ Backup available in Supabase Dashboard"
      
      - name: Run Phase 1 migration (manual approval)
        if: github.event.inputs.migration_phase == 'phase1'
        run: |
          echo "üöÄ Running Phase 1 migration on production..."
          supabase db push -f db/migrations/001_add_uuid_columns.sql
          echo "‚úÖ Phase 1 complete. Monitor for 24-48 hours before Phase 2."
      
      - name: Run Phase 2 migration (manual approval)
        if: github.event.inputs.migration_phase == 'phase2'
        run: |
          echo "‚ö†Ô∏è  Running Phase 2 migration (BREAKING CHANGES)..."
          supabase db push -f db/migrations/002_add_uuid_constraints.sql
          echo "‚úÖ Phase 2 complete. UUID migration finished."
      
      - name: Deploy application to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}
      
      - name: Run post-deployment verification
        run: |
          sleep 15
          curl -f https://yourdomain.com/api/health || exit 1
          echo "‚úÖ Production deployment healthy"
      
      - name: Notify team (Success)
        if: success()
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d '{
              "text":"üöÄ Production deployment successful",
              "blocks":[{
                "type":"section",
                "text":{
                  "type":"mrkdwn",
                  "text":"*Production Deployment* ‚úÖ\nCommit: ${{ github.sha }}\nActor: ${{ github.actor }}"
                }
              }]
            }'
      
      - name: Notify team (Failure)
        if: failure()
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d '{
              "text":"‚ùå Production deployment FAILED",
              "blocks":[{
                "type":"section",
                "text":{
                  "type":"mrkdwn",
                  "text":"*Production Deployment FAILED* ‚ùå\nCommit: ${{ github.sha }}\nCheck logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                }
              }]
            }'
      
      - name: Monitor for errors (1 hour)
        if: success()
        run: |
          echo "üëÄ Monitor production for 1 hour. Check:"
          echo "  - Vercel logs: https://vercel.com/${{ secrets.VERCEL_ORG_ID }}"
          echo "  - Supabase logs: https://app.supabase.com/project/${{ secrets.SUPABASE_PROD_PROJECT_REF }}/logs"
          echo "  - Application health: https://yourdomain.com/api/health"

# ============================================
# Required Secrets (GitHub Repo Settings)
# ============================================
# SUPABASE_ACCESS_TOKEN
# SUPABASE_STAGING_PROJECT_REF
# SUPABASE_PROD_PROJECT_REF
# VERCEL_TOKEN
# VERCEL_ORG_ID
# VERCEL_PROJECT_ID
# SLACK_WEBHOOK_URL (optional)
# ============================================
