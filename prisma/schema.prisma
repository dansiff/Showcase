// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  String     @id @default(uuid())
  email               String     @unique
  name                String
  referralsMade       Referral[] @relation("ReferrerRelation") // Users this user has referred
  referralsReceived   Referral[] @relation("ReferredRelation") // Referrals where this user is the one referred
  websites            Website[]
  createdAt           DateTime   @default(now())
}

model Referral {
  id           String   @id @default(uuid())
  referrerId   String
  referredId   String
  referrer     User     @relation("ReferrerRelation", fields: [referrerId], references: [id])
  referred     User     @relation("ReferredRelation", fields: [referredId], references: [id])
  commission   Float    @default(0)
  createdAt    DateTime @default(now())
}


model Website {
  id             String   @id @default(uuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  projectDetails String
  tier           String
  status         String   @default("Pending")
  createdAt      DateTime @default(now())
}
model Payment {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  amount      Float
  status      String   @default("Pending")
  createdAt   DateTime @default(now())
}
model Commission {
  id          String   @id @default(uuid())
  referralId  String
  referral    Referral @relation(fields: [referralId], references: [id])
  amount      Float
  status      String   @default("Pending")
  createdAt   DateTime @default(now())
}
model UserProfile {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  bio         String?
  profilePic  String?
  website     String?
  socialLinks String? // JSON or markdown of social links
  createdAt   DateTime @default(now())
}
model Notification {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  message     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
}
model Subscription {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  plan        String
  status      String   @default("Active")
  startDate   DateTime @default(now())
  endDate     DateTime
}
model Review {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  rating      Int
  comment     String?
  createdAt   DateTime @default(now())
}

model Message {
  id          String   @id @default(uuid())
  senderId    String
  receiverId  String
  sender      User     @relation("Sender", fields: [senderId], references: [id])
  receiver    User     @relation("Receiver", fields: [receiverId], references: [id])
  content     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
}
model Task {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  title       String
  description String
  status      String   @default("Pending")
  dueDate     DateTime?
  createdAt   DateTime @default(now())
}
model Invoice {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  amount      Float
  status      String   @default("Pending")
  createdAt   DateTime @default(now())
}
model PaymentMethod {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  type        String   // e.g., Credit Card, PayPal
  details     String   // JSON or markdown of payment method details
  createdAt   DateTime @default(now())
}
model ServiceRequest {
  id          String     @id @default(uuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  serviceType ServiceType
  status      ServiceStatus
  details     String     // JSON or markdown of the service request details
  createdAt   DateTime   @default(now())
}


model Service {
  id          String     @id @default(uuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  serviceType ServiceType
  status      ServiceStatus
  details     String     // JSON or markdown of the service details
  createdAt   DateTime   @default(now())
}
enum ServiceType {
  WEBSITE_DESIGN
  MARKETING
  SEO
  AD_CAMPAIGN
}

enum ServiceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum UserRole {
  CLIENT
  ADMIN
  REFERRER
}
