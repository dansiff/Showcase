// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
// ==============================
// ENUMS
// ==============================

enum ServiceType {
  WEBSITE_DESIGN
  MARKETING
  SEO
  AD_CAMPAIGN
}

enum ServiceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum UserRole {
  CLIENT
  ADMIN
  REFERRER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum WebsiteStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

// ==============================
// MODELS
// ==============================

model User {
  id                  String          @id @default(uuid())
  email               String          @unique
  name                String
  createdAt           DateTime        @default(now())

  // Relations
  referralsMade       Referral[]      @relation("ReferrerRelation")
  referralsReceived   Referral[]      @relation("ReferredRelation")
  websites            Website[]
  payments            Payment[]
  commissions         Commission[]
  notifications       Notification[]
  subscription        Subscription?
  reviews             Review[]
  messagesSent        Message[]       @relation("Sender")
  messagesReceived    Message[]       @relation("Receiver")
  tasks               Task[]
  invoices            Invoice[]
  paymentMethods      PaymentMethod[]
  profile             UserProfile?
  serviceRequests     ServiceRequest[]
  services            Service[]
}

model UserProfile {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio         String?
  profilePic  String?
  website     String?
  socialLinks String?
  createdAt   DateTime @default(now())
}

model Referral {
  id           String   @id @default(uuid())
  referrerId   String
  referredId   String
  referrer     User     @relation("ReferrerRelation", fields: [referrerId], references: [id], onDelete: Cascade)
  referred     User     @relation("ReferredRelation", fields: [referredId], references: [id], onDelete: Cascade)
  commission   Float    @default(0)
  createdAt    DateTime @default(now())

  commissionLog Commission?
}


model Website {
  id             String         @id @default(uuid())
  userId         String
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectDetails String
  tier           String
  status         WebsiteStatus  @default(PENDING)
  createdAt      DateTime       @default(now())
}

model Payment {
  id          String         @id @default(uuid())
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount      Float
  status      PaymentStatus  @default(PENDING)
  createdAt   DateTime       @default(now())
}

model Commission {
  id          String     @id @default(uuid())
  referralId  String     @unique
  referral    Referral   @relation(fields: [referralId], references: [id], onDelete: Cascade)
  amount      Float
  status      PaymentStatus  @default(PENDING)
  createdAt   DateTime   @default(now())
}

model Notification {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Subscription {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan        String
  status      String   @default("Active")
  startDate   DateTime @default(now())
  endDate     DateTime
}

model Review {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating      Int
  comment     String?
  createdAt   DateTime @default(now())
}

model Message {
  id          String   @id @default(uuid())
  senderId    String
  receiverId  String
  sender      User     @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User     @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  content     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Task {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String
  status      String   @default("Pending")
  dueDate     DateTime?
  createdAt   DateTime @default(now())
}

model Invoice {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount      Float
  status      String   @default("Pending")
  createdAt   DateTime @default(now())
}

model PaymentMethod {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String
  details     String
  createdAt   DateTime @default(now())
}

model ServiceRequest {
  id          String         @id @default(uuid())
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  serviceType ServiceType
  status      ServiceStatus
  details     String
  createdAt   DateTime       @default(now())
}


model Service {
  id          String         @id @default(uuid())
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  serviceType ServiceType
  status      ServiceStatus
  details     String
  createdAt   DateTime       @default(now())
}
