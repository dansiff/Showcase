// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
   engineType = "binary" // ðŸ‘ˆ force Node.js engine
}

datasource db {
  provider = "postgresql" // or "mysql" | "sqlite" | "sqlserver" | "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  image         String?
  role          UserRole       @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  profile       Profile?
  creator       Creator?
  subscriptions Subscription[]
  payments      Payment[]
  posts         Post[]
}

model Profile {
  id      String @id @default(cuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String @unique
  bio     String?
  dob     DateTime? // optional age gate field
  createdAt DateTime @default(now())
}

model Creator {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @unique
  displayName   String
  stripeAccount String?  // optional for future payouts (Stripe Connect)
  ageRestricted Boolean  @default(false) // if true, show age-gate before viewing content
  createdAt     DateTime @default(now())
  plans         Plan[]
  contents      Content[]
}

model Plan {
  id          String   @id @default(cuid())
  creator     Creator  @relation(fields: [creatorId], references: [id])
  creatorId   String
  name        String
  stripePriceId String  // store Stripe Price ID for recurring billing
  priceCents  Int
  currency    String   @default("usd")
  billingPeriod BillingPeriod @default(MONTH)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  subscriptions Subscription[]
}

model Subscription {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  plan           Plan     @relation(fields: [planId], references: [id])
  planId         String
  stripeSubId    String   @unique
  status         SubscriptionStatus @default(active)
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Content {
  id          String   @id @default(cuid())
  creator     Creator  @relation(fields: [creatorId], references: [id])
  creatorId   String
  title       String
  body        String?  // text post or link
  storageKey  String?  // S3/object key for media
  visibility  Visibility @default(FREE) // FREE, SUBSCRIBERS, PAID
  priceCents  Int?     // only for PAID items
  createdAt   DateTime @default(now())
}

model Payment {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  amountCents   Int
  currency      String   @default("usd")
  stripePaymentId String?
  metadata      Json?
  createdAt     DateTime @default(now())
}

model Post {
  id          String     @id @default(cuid())
  title       String?
  content     String
  imageUrl    String?
  videoUrl    String?
  isPremium   Boolean    @default(false)
  isPublished Boolean    @default(true)
  authorId    String
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes       PostLike[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([authorId])
  @@index([createdAt])
}

model PostLike {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

enum UserRole {
  USER
  CREATOR
  ADMIN
  CLIENT
}

enum BillingPeriod {
  MONTH
  YEAR
}

enum SubscriptionStatus {
  active
  past_due
  canceled
  unpaid
  incomplete
}

enum Visibility {
  FREE
  SUBSCRIBERS
  PAID
}

model ClientIntake {
  id                  String   @id @default(cuid())
  fullName            String
  email               String
  phone               String?
  company             String
  website             String?
  projectType         String   // website, ecommerce, landing-page, web-app, other
  projectDescription  String
  goals               String
  targetAudience      String
  features            String[] // Array of selected features
  designPreferences   String?
  brandGuidelines     String?
  contentReady        String   // ready, partial, need-help, none
  timeline            String   // asap, 1-month, 2-3-months, flexible
  launchDate          DateTime?
  budget              String   // under-5k, 5k-10k, 10k-25k, 25k-50k, 50k-plus
  competitors         String?
  inspiration         String?
  additionalNotes     String?
  preferredCallDate   String?  // Preferred kickoff call date
  preferredCallTime   String?  // Preferred kickoff call time
  uploadedFiles       String[] // Array of file URLs
  termsAccepted       Boolean  @default(false)
  status              String   @default("pending") // pending, in-progress, completed, cancelled
  depositPaid         Boolean  @default(false)
  depositAmount       Int?     // in cents
  finalPaymentPaid    Boolean  @default(false)
  stripeSessionId     String?  // Stripe checkout session ID
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}
